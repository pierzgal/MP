[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GIT – RStudio Tutorial 1",
    "section": "",
    "text": "Before we dive into the specific project, let’s cover the main Git commands you’ll be using:\n\ngit init: Initializes a new Git repository in the current directory.\ngit clone [url]: Creates a copy of a remote repository on your local machine.\ngit add [file]: Stages changes for commit. Use git add . to stage all changes.\ngit commit -m \"[message]\": Creates a new commit with the staged changes and a descriptive message.\ngit push [remote] [branch]: Uploads local commits to a remote repository.\ngit pull [remote] [branch]: Fetches changes from a remote repository and merges them into your current branch.\ngit status: Shows the status of changes as untracked, modified, or staged.\ngit branch: Lists all local branches in the repository.\ngit checkout -b [branch-name]: Creates a new branch and switches to it.\ngit remote add [name] [url]: Adds a new remote repository.\n\nNow, let’s apply these commands to our specific project.\n\n\n\n\n\n\nAn existing Quarto website project on your local machine\nAn empty GitHub repository\nRStudio installed on your computer\nGit installed on your computer\n\n\n\n\nEnsure your Quarto project is set up to render to the docs folder:\n\nOpen your Quarto project in RStudio.\nIn your _quarto.yml file, add or modify the following:\n\nproject:\n  output-dir: docs\n\n\n\nGit command:\ngit init\nRStudio: 1. Go to Tools &gt; Version Control &gt; Project Setup 2. Choose “Git” as the version control system 3. Allow RStudio to restart\n\n\n\nTo ensure we only push the docs folder, create a .gitignore file in your project root:\nGit command:\necho \"*\n!docs/\n!.gitignore\" &gt; .gitignore\nRStudio: 1. File &gt; New File &gt; Text File 2. Add the following content: *    !docs/    !.gitignore 3. Save as .gitignore in the project root\nThis .gitignore file tells Git to ignore everything except the docs folder and the .gitignore file itself.\n\n\n\nIn RStudio: 1. Click the “Render” button, or 2. In the Console, run: r    quarto render\nThis will create or update the docs folder with your rendered website.\n\n\n\nGit command:\ngit add docs/ .gitignore\nRStudio: In the Git pane, check the boxes next to the docs folder and .gitignore file.\n\n\n\nGit command:\ngit commit -m \"Add rendered website files and .gitignore\"\nRStudio: 1. Click the “Commit” button in the Git pane 2. Enter a commit message 3. Click “Commit”\n\n\n\nGit command:\ngit remote add origin https://github.com/yourusername/your-repo-name.git\nRStudio: In the Console, run:\nsystem('git remote add origin https://github.com/yourusername/your-repo-name.git')\nReplace the URL with your actual GitHub repository URL.\n\n\n\nGit command:\ngit checkout -b main\nRStudio: In the Console, run:\nsystem(\"git checkout -b main\")\n\n\n\nGit command:\ngit push -u origin main\nRStudio: 1. Click the “Push” button in the Git pane 2. For the first push, in the Console, run: r    system('git push -u origin main')\n\n\n\n\nGo to your GitHub repository in a web browser\nClick on “Settings”\nIn the left sidebar, click on “Pages”\nUnder “Source”, select “Deploy from a branch”\nUnder “Branch”, select “main” and “/docs” folder\nClick “Save”\n\nYour Quarto website should now be live at https://yourusername.github.io/your-repo-name/.\n\n\n\n\nWhen working with GitHub from RStudio, you’ll need to authenticate to push changes to your remote repository. GitHub no longer supports password authentication for Git operations, so you’ll need to use a personal access token or SSH key. Here’s how to set up authentication:\n\n\n\nGenerate a Personal Access Token (PAT) on GitHub:\n\nGo to GitHub.com and log in\nClick on your profile picture &gt; Settings &gt; Developer settings &gt; Personal access tokens\nClick “Generate new token”\nGive your token a descriptive name\nSelect the necessary scopes (at minimum, select “repo”)\nClick “Generate token”\nCopy the token immediately (you won’t be able to see it again)\n\nStore the PAT in RStudio:\n\nIn RStudio, install the usethis package if you haven’t already:\ninstall.packages(\"usethis\")\nRun the following command to open your Git credentials file:\nusethis::edit_git_config()\nAdd the following lines, replacing YOUR_TOKEN with your actual token:\n[github]\n   token = YOUR_TOKEN\nSave and close the file\n\nUse the token:\n\nRStudio will now use this token automatically when pushing to GitHub\nIf prompted for a password, use the token instead\n\n\n\n\n\n\nGenerate an SSH key pair:\n\nIn RStudio’s Terminal, run:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nPress Enter to accept the default file location\nEnter a secure passphrase (or press Enter for no passphrase)\n\nAdd the SSH key to the ssh-agent:\n\nStart the ssh-agent:\neval \"$(ssh-agent -s)\"\nAdd your SSH private key to the ssh-agent:\nssh-add ~/.ssh/id_ed25519\n\nAdd the public key to your GitHub account:\n\nCopy the public key to your clipboard:\ncat ~/.ssh/id_ed25519.pub\nGo to GitHub.com and log in\nClick on your profile picture &gt; Settings &gt; SSH and GPG keys\nClick “New SSH key”\nPaste your key into the “Key” field\nGive your key a descriptive title\nClick “Add SSH key”\n\nUse SSH URL for your repository:\n\nWhen adding the remote repository, use the SSH URL instead of HTTPS:\ngit remote add origin git@github.com:yourusername/your-repo-name.git\n\n\n\n\n\nIf you encounter authentication issues:\n\nVerify your credentials:\n\nFor PAT: Check if the token is still valid on GitHub\nFor SSH: Ensure your SSH key is added to your GitHub account\n\nReset credentials:\n\nOn Windows: Search for “Credential Manager” and remove any GitHub entries\nOn macOS: Use Keychain Access to remove any GitHub entries\n\nUse the git credential helper:\ngit config --global credential.helper cache\nThis will cache your credentials for a short time, reducing the number of times you need to enter them.\nIf using HTTPS, ensure you’re not being prompted for a username. Your username should be your GitHub username or the email associated with your GitHub account.\n\nBy following these authentication steps, you should be able to securely push your Quarto project to GitHub from RStudio. Remember to keep your PAT or SSH private key secure and never share them publicly.\n\n\n\n\nFor future updates:\n\nMake changes to your Quarto project\nRender the project (Step 4)\nStage changes (Step 5)\nCommit changes (Step 6)\nPush changes (Step 9)\n\nGitHub will automatically update your published site after you push changes.\nRemember to pull any changes if you’re working on multiple machines:\nGit command:\ngit pull origin main\nRStudio: Click the “Pull” button in the Git pane\nThis revised tutorial focuses on pushing only the docs folder to your GitHub repository and includes an introduction to the main Git commands. The .gitignore file ensures that only the necessary files are tracked and pushed to GitHub."
  },
  {
    "objectID": "index.html#introduction-to-git-commands",
    "href": "index.html#introduction-to-git-commands",
    "title": "GIT – RStudio Tutorial 1",
    "section": "",
    "text": "Before we dive into the specific project, let’s cover the main Git commands you’ll be using:\n\ngit init: Initializes a new Git repository in the current directory.\ngit clone [url]: Creates a copy of a remote repository on your local machine.\ngit add [file]: Stages changes for commit. Use git add . to stage all changes.\ngit commit -m \"[message]\": Creates a new commit with the staged changes and a descriptive message.\ngit push [remote] [branch]: Uploads local commits to a remote repository.\ngit pull [remote] [branch]: Fetches changes from a remote repository and merges them into your current branch.\ngit status: Shows the status of changes as untracked, modified, or staged.\ngit branch: Lists all local branches in the repository.\ngit checkout -b [branch-name]: Creates a new branch and switches to it.\ngit remote add [name] [url]: Adds a new remote repository.\n\nNow, let’s apply these commands to our specific project."
  },
  {
    "objectID": "index.html#deploying-quarto-projects-docs-folder-to-github",
    "href": "index.html#deploying-quarto-projects-docs-folder-to-github",
    "title": "GIT – RStudio Tutorial 1",
    "section": "",
    "text": "An existing Quarto website project on your local machine\nAn empty GitHub repository\nRStudio installed on your computer\nGit installed on your computer\n\n\n\n\nEnsure your Quarto project is set up to render to the docs folder:\n\nOpen your Quarto project in RStudio.\nIn your _quarto.yml file, add or modify the following:\n\nproject:\n  output-dir: docs\n\n\n\nGit command:\ngit init\nRStudio: 1. Go to Tools &gt; Version Control &gt; Project Setup 2. Choose “Git” as the version control system 3. Allow RStudio to restart\n\n\n\nTo ensure we only push the docs folder, create a .gitignore file in your project root:\nGit command:\necho \"*\n!docs/\n!.gitignore\" &gt; .gitignore\nRStudio: 1. File &gt; New File &gt; Text File 2. Add the following content: *    !docs/    !.gitignore 3. Save as .gitignore in the project root\nThis .gitignore file tells Git to ignore everything except the docs folder and the .gitignore file itself.\n\n\n\nIn RStudio: 1. Click the “Render” button, or 2. In the Console, run: r    quarto render\nThis will create or update the docs folder with your rendered website.\n\n\n\nGit command:\ngit add docs/ .gitignore\nRStudio: In the Git pane, check the boxes next to the docs folder and .gitignore file.\n\n\n\nGit command:\ngit commit -m \"Add rendered website files and .gitignore\"\nRStudio: 1. Click the “Commit” button in the Git pane 2. Enter a commit message 3. Click “Commit”\n\n\n\nGit command:\ngit remote add origin https://github.com/yourusername/your-repo-name.git\nRStudio: In the Console, run:\nsystem('git remote add origin https://github.com/yourusername/your-repo-name.git')\nReplace the URL with your actual GitHub repository URL.\n\n\n\nGit command:\ngit checkout -b main\nRStudio: In the Console, run:\nsystem(\"git checkout -b main\")\n\n\n\nGit command:\ngit push -u origin main\nRStudio: 1. Click the “Push” button in the Git pane 2. For the first push, in the Console, run: r    system('git push -u origin main')\n\n\n\n\nGo to your GitHub repository in a web browser\nClick on “Settings”\nIn the left sidebar, click on “Pages”\nUnder “Source”, select “Deploy from a branch”\nUnder “Branch”, select “main” and “/docs” folder\nClick “Save”\n\nYour Quarto website should now be live at https://yourusername.github.io/your-repo-name/."
  },
  {
    "objectID": "index.html#updating-your-website",
    "href": "index.html#updating-your-website",
    "title": "GIT – RStudio Tutorial 1",
    "section": "",
    "text": "For future updates:\n\nMake changes to your Quarto project\nRender the project (Step 4)\nStage changes (Step 5)\nCommit changes (Step 6)\nPush changes (Step 9)\n\nGitHub will automatically update your published site after you push changes.\nRemember to pull any changes if you’re working on multiple machines:\nGit command:\ngit pull origin main\nRStudio: Click the “Pull” button in the Git pane\nThis revised tutorial focuses on pushing only the docs folder to your GitHub repository and includes an introduction to the main Git commands. The .gitignore file ensures that only the necessary files are tracked and pushed to GitHub."
  },
  {
    "objectID": "index.html#github-authentication",
    "href": "index.html#github-authentication",
    "title": "GIT – RStudio Tutorial 1",
    "section": "",
    "text": "When working with GitHub from RStudio, you’ll need to authenticate to push changes to your remote repository. GitHub no longer supports password authentication for Git operations, so you’ll need to use a personal access token or SSH key. Here’s how to set up authentication:\n\n\n\nGenerate a Personal Access Token (PAT) on GitHub:\n\nGo to GitHub.com and log in\nClick on your profile picture &gt; Settings &gt; Developer settings &gt; Personal access tokens\nClick “Generate new token”\nGive your token a descriptive name\nSelect the necessary scopes (at minimum, select “repo”)\nClick “Generate token”\nCopy the token immediately (you won’t be able to see it again)\n\nStore the PAT in RStudio:\n\nIn RStudio, install the usethis package if you haven’t already:\ninstall.packages(\"usethis\")\nRun the following command to open your Git credentials file:\nusethis::edit_git_config()\nAdd the following lines, replacing YOUR_TOKEN with your actual token:\n[github]\n   token = YOUR_TOKEN\nSave and close the file\n\nUse the token:\n\nRStudio will now use this token automatically when pushing to GitHub\nIf prompted for a password, use the token instead\n\n\n\n\n\n\nGenerate an SSH key pair:\n\nIn RStudio’s Terminal, run:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nPress Enter to accept the default file location\nEnter a secure passphrase (or press Enter for no passphrase)\n\nAdd the SSH key to the ssh-agent:\n\nStart the ssh-agent:\neval \"$(ssh-agent -s)\"\nAdd your SSH private key to the ssh-agent:\nssh-add ~/.ssh/id_ed25519\n\nAdd the public key to your GitHub account:\n\nCopy the public key to your clipboard:\ncat ~/.ssh/id_ed25519.pub\nGo to GitHub.com and log in\nClick on your profile picture &gt; Settings &gt; SSH and GPG keys\nClick “New SSH key”\nPaste your key into the “Key” field\nGive your key a descriptive title\nClick “Add SSH key”\n\nUse SSH URL for your repository:\n\nWhen adding the remote repository, use the SSH URL instead of HTTPS:\ngit remote add origin git@github.com:yourusername/your-repo-name.git\n\n\n\n\n\nIf you encounter authentication issues:\n\nVerify your credentials:\n\nFor PAT: Check if the token is still valid on GitHub\nFor SSH: Ensure your SSH key is added to your GitHub account\n\nReset credentials:\n\nOn Windows: Search for “Credential Manager” and remove any GitHub entries\nOn macOS: Use Keychain Access to remove any GitHub entries\n\nUse the git credential helper:\ngit config --global credential.helper cache\nThis will cache your credentials for a short time, reducing the number of times you need to enter them.\nIf using HTTPS, ensure you’re not being prompted for a username. Your username should be your GitHub username or the email associated with your GitHub account.\n\nBy following these authentication steps, you should be able to securely push your Quarto project to GitHub from RStudio. Remember to keep your PAT or SSH private key secure and never share them publicly."
  }
]